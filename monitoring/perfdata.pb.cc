// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perfdata.proto
// Protobuf C++ Version: 5.26.1

#include "perfdata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace rocksdb {

inline constexpr PerfDataResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : status_{static_cast< ::rocksdb::PerfResponseStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PerfDataResponse::PerfDataResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PerfDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataResponseDefaultTypeInternal() {}
  union {
    PerfDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataResponseDefaultTypeInternal _PerfDataResponse_default_instance_;

inline constexpr Metric::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Metric::Metric(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;

inline constexpr PerfDataRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metrics_{},
        timestamp_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PerfDataRequest::PerfDataRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PerfDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerfDataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerfDataRequestDefaultTypeInternal() {}
  union {
    PerfDataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerfDataRequestDefaultTypeInternal _PerfDataRequest_default_instance_;
}  // namespace rocksdb
static ::_pb::Metadata file_level_metadata_perfdata_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_perfdata_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_perfdata_2eproto = nullptr;
const ::uint32_t
    TableStruct_perfdata_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rocksdb::PerfDataRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocksdb::PerfDataRequest, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::rocksdb::PerfDataRequest, _impl_.metrics_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rocksdb::Metric, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocksdb::Metric, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::rocksdb::Metric, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::rocksdb::PerfDataResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::rocksdb::PerfDataResponse, _impl_.status_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::rocksdb::PerfDataRequest)},
        {10, -1, -1, sizeof(::rocksdb::Metric)},
        {20, -1, -1, sizeof(::rocksdb::PerfDataResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::rocksdb::_PerfDataRequest_default_instance_._instance,
    &::rocksdb::_Metric_default_instance_._instance,
    &::rocksdb::_PerfDataResponse_default_instance_._instance,
};
const char descriptor_table_protodef_perfdata_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016perfdata.proto\022\007rocksdb\"F\n\017PerfDataReq"
    "uest\022\021\n\ttimestamp\030\001 \001(\001\022 \n\007metrics\030\002 \003(\013"
    "2\017.rocksdb.Metric\"$\n\006Metric\022\013\n\003key\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\001\"\?\n\020PerfDataResponse\022+\n\006s"
    "tatus\030\001 \001(\0162\033.rocksdb.PerfResponseStatus"
    "*H\n\022PerfResponseStatus\022\013\n\007SUCCESS\020\000\022\013\n\007F"
    "AILURE\020\001\022\030\n\024SERVER_NOT_REACHABLE\020\0022V\n\017Pe"
    "rfDataService\022C\n\014SendPerfData\022\030.rocksdb."
    "PerfDataRequest\032\031.rocksdb.PerfDataRespon"
    "seb\006proto3"
};
static ::absl::once_flag descriptor_table_perfdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_perfdata_2eproto = {
    false,
    false,
    370,
    descriptor_table_protodef_perfdata_2eproto,
    "perfdata.proto",
    &descriptor_table_perfdata_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_perfdata_2eproto::offsets,
    file_level_metadata_perfdata_2eproto,
    file_level_enum_descriptors_perfdata_2eproto,
    file_level_service_descriptors_perfdata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_perfdata_2eproto_getter() {
  return &descriptor_table_perfdata_2eproto;
}
namespace rocksdb {
const ::google::protobuf::EnumDescriptor* PerfResponseStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_perfdata_2eproto);
  return file_level_enum_descriptors_perfdata_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t PerfResponseStatus_internal_data_[] = {
    196608u, 0u, };
bool PerfResponseStatus_IsValid(int value) {
  return 0 <= value && value <= 2;
}
// ===================================================================

class PerfDataRequest::_Internal {
 public:
};

PerfDataRequest::PerfDataRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocksdb.PerfDataRequest)
}
inline PROTOBUF_NDEBUG_INLINE PerfDataRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : metrics_{visibility, arena, from.metrics_},
        _cached_size_{0} {}

PerfDataRequest::PerfDataRequest(
    ::google::protobuf::Arena* arena,
    const PerfDataRequest& from)
    : ::google::protobuf::Message(arena) {
  PerfDataRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.timestamp_ = from._impl_.timestamp_;

  // @@protoc_insertion_point(copy_constructor:rocksdb.PerfDataRequest)
}
inline PROTOBUF_NDEBUG_INLINE PerfDataRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metrics_{visibility, arena},
        _cached_size_{0} {}

inline void PerfDataRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
PerfDataRequest::~PerfDataRequest() {
  // @@protoc_insertion_point(destructor:rocksdb.PerfDataRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PerfDataRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PerfDataRequest::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PerfDataRequest, _impl_._cached_size_),
              false,
          },
          &PerfDataRequest::MergeImpl,
          &PerfDataRequest::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PerfDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rocksdb.PerfDataRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  _impl_.timestamp_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PerfDataRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> PerfDataRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PerfDataRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocksdb::PerfDataRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .rocksdb.Metric metrics = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PerfDataRequest, _impl_.metrics_)}},
    // double timestamp = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(PerfDataRequest, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(PerfDataRequest, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .rocksdb.Metric metrics = 2;
    {PROTOBUF_FIELD_OFFSET(PerfDataRequest, _impl_.metrics_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::rocksdb::Metric>()},
  }}, {{
  }},
};

::uint8_t* PerfDataRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocksdb.PerfDataRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_timestamp(), target);
  }

  // repeated .rocksdb.Metric metrics = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_metrics_size());
       i < n; i++) {
    const auto& repfield = this->_internal_metrics().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocksdb.PerfDataRequest)
  return target;
}

::size_t PerfDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocksdb.PerfDataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rocksdb.Metric metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_internal_metrics()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // double timestamp = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PerfDataRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PerfDataRequest*>(&to_msg);
  auto& from = static_cast<const PerfDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocksdb.PerfDataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metrics()->MergeFrom(
      from._internal_metrics());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  ::uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PerfDataRequest::CopyFrom(const PerfDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocksdb.PerfDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PerfDataRequest::IsInitialized() const {
  return true;
}

void PerfDataRequest::InternalSwap(PerfDataRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
        swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata PerfDataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_perfdata_2eproto_getter,
                                   &descriptor_table_perfdata_2eproto_once,
                                   file_level_metadata_perfdata_2eproto[0]);
}
// ===================================================================

class Metric::_Internal {
 public:
};

Metric::Metric(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocksdb.Metric)
}
inline PROTOBUF_NDEBUG_INLINE Metric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : key_(arena, from.key_),
        _cached_size_{0} {}

Metric::Metric(
    ::google::protobuf::Arena* arena,
    const Metric& from)
    : ::google::protobuf::Message(arena) {
  Metric* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.value_ = from._impl_.value_;

  // @@protoc_insertion_point(copy_constructor:rocksdb.Metric)
}
inline PROTOBUF_NDEBUG_INLINE Metric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_(arena),
        _cached_size_{0} {}

inline void Metric::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
Metric::~Metric() {
  // @@protoc_insertion_point(destructor:rocksdb.Metric)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Metric::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Metric::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Metric, _impl_._cached_size_),
              false,
          },
          &Metric::MergeImpl,
          &Metric::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:rocksdb.Metric)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Metric::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 26, 2> Metric::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Metric_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocksdb::Metric>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Metric, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Metric, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\16\3\0\0\0\0\0\0"
    "rocksdb.Metric"
    "key"
  }},
};

::uint8_t* Metric::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocksdb.Metric)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "rocksdb.Metric.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double value = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  ::uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocksdb.Metric)
  return target;
}

::size_t Metric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocksdb.Metric)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // double value = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  ::uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Metric::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocksdb.Metric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  ::uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocksdb.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Metric::IsInitialized() const {
  return true;
}

void Metric::InternalSwap(Metric* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_perfdata_2eproto_getter,
                                   &descriptor_table_perfdata_2eproto_once,
                                   file_level_metadata_perfdata_2eproto[1]);
}
// ===================================================================

class PerfDataResponse::_Internal {
 public:
};

PerfDataResponse::PerfDataResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:rocksdb.PerfDataResponse)
}
PerfDataResponse::PerfDataResponse(
    ::google::protobuf::Arena* arena, const PerfDataResponse& from)
    : PerfDataResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PerfDataResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PerfDataResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
PerfDataResponse::~PerfDataResponse() {
  // @@protoc_insertion_point(destructor:rocksdb.PerfDataResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PerfDataResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PerfDataResponse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PerfDataResponse, _impl_._cached_size_),
              false,
          },
          &PerfDataResponse::MergeImpl,
          &PerfDataResponse::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PerfDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rocksdb.PerfDataResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PerfDataResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> PerfDataResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PerfDataResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::rocksdb::PerfDataResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .rocksdb.PerfResponseStatus status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PerfDataResponse, _impl_.status_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PerfDataResponse, _impl_.status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .rocksdb.PerfResponseStatus status = 1;
    {PROTOBUF_FIELD_OFFSET(PerfDataResponse, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* PerfDataResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rocksdb.PerfDataResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .rocksdb.PerfResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rocksdb.PerfDataResponse)
  return target;
}

::size_t PerfDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rocksdb.PerfDataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rocksdb.PerfResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PerfDataResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PerfDataResponse*>(&to_msg);
  auto& from = static_cast<const PerfDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rocksdb.PerfDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PerfDataResponse::CopyFrom(const PerfDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rocksdb.PerfDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PerfDataResponse::IsInitialized() const {
  return true;
}

void PerfDataResponse::InternalSwap(PerfDataResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::google::protobuf::Metadata PerfDataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_perfdata_2eproto_getter,
                                   &descriptor_table_perfdata_2eproto_once,
                                   file_level_metadata_perfdata_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace rocksdb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_perfdata_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
